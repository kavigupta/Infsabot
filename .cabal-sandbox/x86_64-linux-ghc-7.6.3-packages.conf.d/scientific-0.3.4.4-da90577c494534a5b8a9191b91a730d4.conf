name: scientific
version: 0.3.4.4
id: scientific-0.3.4.4-da90577c494534a5b8a9191b91a730d4
license: BSD3
copyright:
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
stability:
homepage: https://github.com/basvandijk/scientific
package-url:
synopsis: Numbers represented using scientific notation
description: @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
             arbitrary precision and space efficient. They are represented using
             <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
             The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
             @e :: 'Int'@. A scientific number corresponds to the
             'Fractional' number: @'fromInteger' c * 10 '^^' e@.
             .
             Note that since we're using an 'Int' to represent the exponent these numbers
             aren't truly arbitrary precision. I intend to change the type of the exponent
             to 'Integer' in a future release.
             .
             The main application of 'Scientific' is to be used as the target of parsing
             arbitrary precision numbers coming from an untrusted source. The advantages
             over using 'Rational' for this are that:
             .
             * A 'Scientific' is more efficient to construct. Rational numbers need to be
             constructed using '%' which has to compute the 'gcd' of the 'numerator' and
             'denominator'.
             .
             * 'Scientific' is safe against numbers with huge exponents. For example:
             @1e1000000000 :: 'Rational'@ will fill up all space and crash your
             program. Scientific works as expected:
             .
             > > read "1e1000000000" :: Scientific
             > 1.0e1000000000
             .
             * Also, the space usage of converting scientific numbers with huge exponents to
             @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
             will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules: Data.Scientific Data.Text.Lazy.Builder.Scientific
                 Data.ByteString.Builder.Scientific
hidden-modules: Math.NumberTheory.Logarithms
                GHC.Integer.Logarithms.Compat GHC.Integer.Compat Utils
trusted: False
import-dirs: /home/kavi/Dropbox/workspaces/Haskell/Infsabot/.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/scientific-0.3.4.4
library-dirs: /home/kavi/Dropbox/workspaces/Haskell/Infsabot/.cabal-sandbox/lib/x86_64-linux-ghc-7.6.3/scientific-0.3.4.4
hs-libraries: HSscientific-0.3.4.4
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: base-4.6.0.1-8aa5d403c45ea59dcd2c39f123e27d57
         binary-0.5.1.1-72ed744c57c32286a49da6dda4f660b7
         bytestring-0.10.0.2-4f93248f75667c2c3321a7a6761b576f
         containers-0.5.0.0-ab1dae9a94cd3cc84e7b2805636ebfa2
         deepseq-1.3.0.1-5cc4cd89bdc2e8f6db1833d95ec36926
         ghc-prim-0.3.0.0-d5221a8c8a269b66ab9a07bdc23317dd
         hashable-1.2.3.3-c4436ae2bb928be423d020bc45a37a8a
         integer-gmp-0.5.0.0-2f15426f5b53fe4c6490832f9b20d8d7
         text-1.2.1.3-755a30640533aa2bfed36fb8ddc60535
         vector-0.11.0.0-56a634ace000f22e1754b54304acc13a
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/kavi/Dropbox/workspaces/Haskell/Infsabot/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.6.3/scientific-0.3.4.4/html/scientific.haddock
haddock-html: /home/kavi/Dropbox/workspaces/Haskell/Infsabot/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.6.3/scientific-0.3.4.4/html
